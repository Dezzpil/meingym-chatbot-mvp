"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∫—Ä–∞—Å–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏.
"""

import sys
from datetime import datetime


class ColorfulLogger:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫—Ä–∞—Å–æ—á–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏."""

    # ANSI color codes
    COLORS = {
        'RESET': '\033[0m',
        'BLACK': '\033[30m',
        'RED': '\033[31m',
        'GREEN': '\033[32m',
        'YELLOW': '\033[33m',
        'BLUE': '\033[34m',
        'MAGENTA': '\033[35m',
        'CYAN': '\033[36m',
        'WHITE': '\033[37m',
        'BOLD': '\033[1m',
        'UNDERLINE': '\033[4m',
        'BG_GREEN': '\033[42m',
        'BG_YELLOW': '\033[43m',
        'BG_BLUE': '\033[44m',
        'BG_MAGENTA': '\033[45m',
        'BG_CYAN': '\033[46m',
    }

    @staticmethod
    def _get_timestamp():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [–ß–ß:–ú–ú:–°–°]."""
        return f"[{datetime.now().strftime('%H:%M:%S')}]"

    @classmethod
    def info(cls, message, end='\n'):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–æ–ª—É–±—ã–º —Ü–≤–µ—Ç–æ–º."""
        timestamp = cls._get_timestamp()
        print(f"{cls.COLORS['CYAN']}{timestamp} ‚ÑπÔ∏è {message}{cls.COLORS['RESET']}", end=end, flush=True)

    @classmethod
    def success(cls, message, end='\n'):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º."""
        timestamp = cls._get_timestamp()
        print(f"{cls.COLORS['GREEN']}{timestamp} ‚úÖ {message}{cls.COLORS['RESET']}", end=end, flush=True)

    @classmethod
    def warning(cls, message, end='\n'):
        """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∂–µ–ª—Ç—ã–º —Ü–≤–µ—Ç–æ–º."""
        timestamp = cls._get_timestamp()
        print(f"{cls.COLORS['YELLOW']}{timestamp} ‚ö†Ô∏è {message}{cls.COLORS['RESET']}", end=end, flush=True)

    @classmethod
    def error(cls, message, end='\n'):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∫—Ä–∞—Å–Ω—ã–º —Ü–≤–µ—Ç–æ–º."""
        timestamp = cls._get_timestamp()
        print(f"{cls.COLORS['RED']}{timestamp} ‚ùå {message}{cls.COLORS['RESET']}", end=end, flush=True)

    @classmethod
    def highlight(cls, message, end='\n'):
        """–í—ã–≤–æ–¥–∏—Ç –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Ä–ø—É—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º."""
        timestamp = cls._get_timestamp()
        print(f"{cls.COLORS['MAGENTA']}{timestamp} üîç {message}{cls.COLORS['RESET']}", end=end, flush=True)

    @classmethod
    def processing(cls, message, end='\n'):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–∏–Ω–∏–º —Ü–≤–µ—Ç–æ–º."""
        timestamp = cls._get_timestamp()
        print(f"{cls.COLORS['BLUE']}{timestamp} ‚öôÔ∏è {message}{cls.COLORS['RESET']}", end=end, flush=True)

    @classmethod
    def progress(cls, current, total, prefix='', suffix='', length=30):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞."""
        timestamp = cls._get_timestamp()
        percent = int(100 * (current / float(total)))
        filled_length = int(length * current // total)
        bar = '‚ñà' * filled_length + '‚ñë' * (length - filled_length)

        sys.stdout.write(f"\r{cls.COLORS['CYAN']}{timestamp} {prefix} |{cls.COLORS['GREEN']}{bar}{cls.COLORS['CYAN']}| {percent}% {suffix}{cls.COLORS['RESET']}")
        sys.stdout.flush()

        if current == total:
            print()


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
logger = ColorfulLogger()
